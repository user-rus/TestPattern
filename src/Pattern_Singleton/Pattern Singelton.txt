Что такое синглтон?
Синглтон — это один из самых простых шаблонов (паттернов) проектирования, 
который применяется к классу. Иногда говорят: “этот класс — синглтон”, подразумевая, 
что этот класс реализует паттерн проектирования синглтон. 

Иногда необходимо написать класс, у которого можно будет создать только один объект. 
Например, класс, отвечающий за логирование или подключение к базе данных. 

Шаблон проектирования синглтон описывает, как мы можем выполнить такую задачу. 

Синглтон — это шаблон (паттерн) проектирования, который делает две вещи:
Дает гарантию, что у класса будет всего один экземпляр класса.

Предоставляет глобальную точку доступа к экземпляру данного класса.

Отсюда — две особенности, характерные для практически каждой реализации паттерна синглтон: 
Приватный конструктор. Ограничивает возможность создания объектов класса за пределами самого класса.

Публичный статический метод, который возвращает экземпляр класса. Данный метод называют getInstance. 
Это глобальная точка доступа к экземпляру класса.

Варианты реализации
Шаблон проектирования синглтон применяют по-разному. Каждый вариант по-своему хорош и плох. 
Тут как всегда: идеала нет, но нужно к нему стремиться. 

Но прежде всего давай определимся, что такое хорошо и что такое плохо, 
и какие метрики влияют на оценку реализации шаблона проектирования.

Начнем с положительного. Вот критерии, которые придают реализации сочности и привлекательности:
Ленивая инициализация: когда класс загружается во время работы приложения именно тогда, когда он нужен.

Простота и прозрачность кода: метрика, конечно, субъективная, но важная.

Потокобезопасность: корректная работа в многопоточной среде.

Высокая производительность в многопоточной среде: потоки блокируют друг друга минимально, 
либо вообще не блокируют при совместном доступе к ресурсу.

Теперь минусы. Перечислим критерии, которые выставляют реализацию в нелучшем свете: 
Не ленивая инициализация: когда класс загружается при старте приложения, независимо от того, нужен он или нет 
(парадокс, в мире IT лучше быть лентяем)

Сложность и плохая читаемость кода. Метрика также субъективная. Будем считать, что если кровь пошла из глаз, 
реализация так себе.

Отсутствие потокобезопасности. Иными словами, “потокоопасность”. Некорректная работа в многопоточной среде.

Низкая производительность в многопоточной среде: потоки блокируют друг друга все время либо часто, 
при совместном доступе к ресурсу.